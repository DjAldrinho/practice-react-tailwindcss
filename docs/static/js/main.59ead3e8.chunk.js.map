{"version":3,"sources":["reportWebVitals.ts","components/search-gif/SearchGif.tsx","components/add-category/AddCategory.tsx","components/list-categories/ListCategories.tsx","services/gif.service.ts","components/list-gifs/ListGif.tsx","hooks/useFetchImages.ts","gif-expert-app/GifExpert.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SearchGif","htmlRecent","buttonRecent","showRecent","setSearch","useState","recentSearch","setRecentSearch","countSearch","setCountSearch","inputSearch","setInputSearch","mapSearch","finalSearch","newRecentSearch","_","values","groupBy","map","d","i","id","name","count","length","slice","reverse","item","onClick","newSearch","pull","handleRemove","className","onSubmit","event","preventDefault","updateRecentSearch","type","placeholder","onChange","target","value","required","AddCategory","setCategories","parentCategories","inputCategory","setInputCategory","newCategories","includes","capitalize","sort","initialCategories","ListCategories","categories","category","findGifByCategory","filter","v","sortBy","GifService","apiKey","baseUrl","limit","query","a","url","this","fetch","response","json","data","mapResponse","gif","img","title","slug","images","downsized_medium","ListGif","search","loading","state","setState","gifService","useEffect","get","useFetchImages","disabled","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","index","alt","src","GifExpertApp","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.59ead3e8.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState } from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const SearchGif = ({ showRecent, setSearch }: any) => {\r\n  const [recentSearch, setRecentSearch] = useState([]);\r\n  const [countSearch, setCountSearch] = useState([]);\r\n  const [inputSearch, setInputSearch] = useState('');\r\n\r\n  let htmlRecent;\r\n  let buttonRecent;\r\n\r\n\r\n  function changeSearch(event: any) {\r\n    setInputSearch(event.target.value);\r\n  };\r\n\r\n  function handleRemove(name: string) {\r\n    const newSearch = _.pull(recentSearch, name);\r\n    // @ts-ignore\r\n    setRecentSearch(newSearch);\r\n    mapSearch(newSearch);\r\n  }\r\n\r\n  function handleSubmit(event: any) {\r\n    event.preventDefault();\r\n\r\n    updateRecentSearch();\r\n\r\n    setSearch(inputSearch);\r\n\r\n    cleanSearch();\r\n  }\r\n\r\n  function updateRecentSearch() {\r\n    const finalSearch = [...recentSearch, inputSearch];\r\n    // @ts-ignore\r\n    setRecentSearch(finalSearch);\r\n    mapSearch(finalSearch);\r\n  }\r\n\r\n  function cleanSearch() {\r\n    setInputSearch('');\r\n  }\r\n\r\n  function mapSearch(finalSearch: any) {\r\n    const newRecentSearch = _.values(_.groupBy(finalSearch)).map((d: any, i: number) => ({\r\n      id: i,\r\n      name: d[0],\r\n      count: d.length,\r\n    }));\r\n\r\n    // @ts-ignore\r\n    setCountSearch(newRecentSearch.slice(0, 18).reverse());\r\n  }\r\n\r\n\r\n  if (recentSearch) {\r\n\r\n    buttonRecent = countSearch.map((item: any) => {\r\n      return (\r\n        <button\r\n          key={item.id}\r\n          onClick={() => handleRemove(item.name)}\r\n          className=\"px-2 mx-1 py-1 text-xs font-semibold text-white bg-gray-400\r\n                                rounded-md hover:bg-gray-700  focus:ring-gray-400 focus:ring-opacity-75\"\r\n        >\r\n          {item.name} ({item.count})\r\n        </button>\r\n      );\r\n    });\r\n  }\r\n\r\n  if (showRecent) {\r\n    htmlRecent = (\r\n      <div className=\"mt-4\">\r\n        <h3 className=\"text-center text-xl italic mb-4\">Recent searches</h3>\r\n        <div className=\"grid grid-cols-3 grid-flow-row gap-1\">{buttonRecent}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"lg:my-1 pt-5 lg:pt-0 flex items-center\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search gif by name\"\r\n            onChange={changeSearch}\r\n            required={true}\r\n            name=\"search\"\r\n            value={inputSearch}\r\n            className=\"shadow-md rounded-md mx-2 my-1 h-10 px-2 focus:outline-none w-4/5\"\r\n          />\r\n          <button\r\n            className=\"py-2 px-5 bg-gray-500 text-white font-semibold rounded-md shadow-md\r\n                                 hover:bg-gray-700 focus:outline-none focus:ring-2\r\n                                 focus:ring-gray-400 focus:ring-opacity-75 h-10\"\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      {htmlRecent}\r\n    </div>\r\n  );\r\n};\r\n\r\nSearchGif.propTypes = {\r\n  showRecent: PropTypes.bool.isRequired,\r\n  setSearch: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\n\r\n\r\nexport const AddCategory = ({ setCategories, parentCategories }: any) => {\r\n  const [inputCategory, setInputCategory] = useState('');\r\n\r\n  function changeInputCategory(event: any) {\r\n    setInputCategory(event.target.value);\r\n  }\r\n\r\n  function handleSubmit(event: any) {\r\n    event.preventDefault();\r\n\r\n    let newCategories;\r\n\r\n    if (!parentCategories.includes(inputCategory)) {\r\n      newCategories = [...parentCategories, _.capitalize(inputCategory)].sort();\r\n      setCategories(newCategories);\r\n    }\r\n\r\n    setInputCategory('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"mx-auto lg:p-2 p-1 flex justify-center items-center\">\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" name=\"inputCategory\" value={inputCategory}\r\n               onChange={changeInputCategory} required={true}\r\n               className=\"shadow-md rounded-md mx-2 my-1 h-10 px-2 focus:outline-none \"\r\n               placeholder=\"Write your category...\"/>\r\n        <button\r\n          className=\"py-2 px-3 lg:px-5 bg-green-500 text-white font-semibold rounded-md shadow-md\r\n                                 hover:bg-green-700 focus:outline-none focus:ring-2\r\n                                 focus:ring-green-400 focus:ring-opacity-75\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n  parentCategories: PropTypes.array.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AddCategory } from '../add-category/AddCategory';\r\nimport _ from 'lodash';\r\n\r\nconst initialCategories = ['One Piece'].sort();\r\n\r\nexport const ListCategories = ({ setSearch }: any) => {\r\n\r\n  const [categories, setCategories] = useState(initialCategories);\r\n\r\n  function findGifByCategory(category: string) {\r\n    setSearch(category);\r\n  }\r\n\r\n  function handleRemove(id: number){\r\n    const newCategories = categories.filter((v: any, i: number) => i !== id);\r\n    setCategories(_.sortBy(newCategories));\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-gray-100 rounded-md\">\r\n      <h2\r\n        className=\"px-4 py-2 mx-2 my-2 font-sans font-bold text-gray-800 bg-gray-200 shadow-sm rounded-md\">Favourite\r\n        Categories</h2>\r\n      <div className=\"overflow-y-auto h-40\">\r\n        {\r\n          categories.map((category: any, i: number) => {\r\n            return (\r\n              <div key={i}\r\n                   className=\"flex items-center font-sans px-3 py-2 text-gray-500 cursor-pointer hover:bg-gray-200 hover:text-gray-900\">\r\n                <h3 className=\"flex-1 text-sm font-mono\"\r\n                    onClick={() => findGifByCategory(category)}>{category}</h3>\r\n                <button className=\"px-2 py-1 text-xs text-white bg-gray-400\r\n                                            rounded-full hover:bg-primary\" onClick={() => handleRemove(i)}>\r\n                  X\r\n                </button>\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n      <hr/>\r\n      <AddCategory parentCategories={categories}\r\n                   setCategories={setCategories}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nListCategories.propTypes = {\r\n  setSearch: PropTypes.func.isRequired,\r\n};\r\n","export class GifService {\r\n\r\n  private apiKey: string = 'WQQOhQiUul4anrMO5phrf9VvUG7ZWWts';\r\n  private baseUrl: string = 'https://api.giphy.com/v1/gifs';\r\n  private limit: number = 20;\r\n\r\n\r\n  async get(query: string | undefined) {\r\n    if (query) {\r\n      const url: string = `${(this.baseUrl)}/search?q=${query}\r\n      &api_key=${this.apiKey}&limit=${this.limit}`;\r\n      const response = await fetch(url);\r\n      const { data } = await response.json();\r\n      return GifService.mapResponse(data);\r\n    }\r\n  }\r\n\r\n  private static mapResponse(data: any) {\r\n    let gif;\r\n\r\n    if (data) {\r\n      gif = data.map((img: any) => {\r\n        return {\r\n          id: img.id,\r\n          title: img.title,\r\n          slug: img.slug,\r\n          url: img.images?.downsized_medium.url,\r\n        };\r\n      });\r\n    }\r\n\r\n    return gif;\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchImages } from '../../hooks/useFetchImages';\r\n\r\nexport const ListGif = ({ search }: any) => {\r\n\r\n  const { data: images, loading } = useFetchImages(search);\r\n\r\n  return (\r\n    <div className=\"rounded-t-xl overflow-hidden bg-gradient-to-r from-gray-50 to-gray-100 p-10 mt-2 shadow-md\">\r\n      <h3 className=\"text-center text-xl italic mb-4\">Results for {_.capitalize(search)}</h3>\r\n      {loading && (<button type=\"button\"\r\n                           className=\"inline-flex items-center px-4 py-2 border border-transparent text-base leading-6 font-medium rounded-md text-white bg-gray-600 hover:bg-gray-500 focus:border-gray-700 active:bg-gray-700 transition ease-in-out duration-150 cursor-not-allowed\"\r\n                           disabled={loading}>\r\n        <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\"\r\n             viewBox=\"0 0 24 24\">\r\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"/>\r\n          <path className=\"opacity-75\" fill=\"currentColor\"\r\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"/>\r\n        </svg>\r\n        Loading\r\n      </button>)}\r\n      <div className=\"grid grid-cols-4 gap-2 place-items-stretch\">\r\n        {\r\n          images.map((img: any, index: number) => {\r\n            return (\r\n              <img key={index} className=\"rounded-xl shadow-md\"\r\n                   alt={img.title} src={img.url}/>\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nListGif.propTypes = {\r\n  search: PropTypes.string.isRequired,\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { GifService } from '../services/gif.service';\r\n\r\nexport const useFetchImages = (search: string) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  const gifService = new GifService();\r\n\r\n  useEffect(() => {\r\n\r\n    if (search) {\r\n      gifService.get(search).then((img) => {\r\n        setState({\r\n          data: img,\r\n          loading: false,\r\n        });\r\n      });\r\n    }\r\n\r\n  }, [search]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { SearchGif } from '../components/search-gif/SearchGif';\r\nimport { ListCategories } from '../components/list-categories/ListCategories';\r\nimport { ListGif } from '../components/list-gifs/ListGif';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [search, setSearch] = useState('One Piece');\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-7\">\r\n      <h1 className=\"text-gray-600 text-5xl text-center mb-4 font-sans\">Gif Expert App</h1>\r\n      <hr/>\r\n      <div\r\n        className=\"rounded-t-xl overflow-hidden bg-gradient-to-r from-gray-50 to-gray-100 p-10 mt-2 shadow-md\">\r\n        <div className=\"h-70 grid grid-row-2 lg:grid-cols-2 lg:grid-flow-col lg:gap-4\">\r\n          <ListCategories setSearch={setSearch}/>\r\n          <SearchGif showRecent={true}\r\n                     setSearch={setSearch}/>\r\n        </div>\r\n      </div>\r\n      <ListGif search={search}/>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {GifExpertApp} from \"./gif-expert-app/GifExpert\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <GifExpertApp/>\r\n    </React.StrictMode>,\r\n    document.querySelector('#root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}